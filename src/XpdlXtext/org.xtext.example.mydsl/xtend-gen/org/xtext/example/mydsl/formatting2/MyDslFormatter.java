/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import xPDL.MessageFlow;
import xPDL.Participant;
import xPDL.Pool;
import xPDL.XpdlRoot;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;
  
  protected void _format(final XpdlRoot xpdlRoot, @Extension final IFormattableDocument document) {
    EList<Participant> _participants = xpdlRoot.getParticipants();
    for (final Participant participant : _participants) {
      document.<Participant>format(participant);
    }
    EList<xPDL.Process> _process = xpdlRoot.getProcess();
    for (final xPDL.Process process : _process) {
      document.<xPDL.Process>format(process);
    }
    EList<MessageFlow> _messageflows = xpdlRoot.getMessageflows();
    for (final MessageFlow messageFlow : _messageflows) {
      document.<MessageFlow>format(messageFlow);
    }
  }
  
  protected void _format(final Participant participant, @Extension final IFormattableDocument document) {
    EList<Pool> _pools = participant.getPools();
    for (final Pool pool : _pools) {
      document.<Pool>format(pool);
    }
  }
  
  public void format(final Object participant, final IFormattableDocument document) {
    if (participant instanceof XtextResource) {
      _format((XtextResource)participant, document);
      return;
    } else if (participant instanceof Participant) {
      _format((Participant)participant, document);
      return;
    } else if (participant instanceof XpdlRoot) {
      _format((XpdlRoot)participant, document);
      return;
    } else if (participant instanceof EObject) {
      _format((EObject)participant, document);
      return;
    } else if (participant == null) {
      _format((Void)null, document);
      return;
    } else if (participant != null) {
      _format(participant, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(participant, document).toString());
    }
  }
}
